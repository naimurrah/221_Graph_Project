        -:    0:Source:graph_tests.cpp
        -:    0:Graph:graph_tests.gcno
        -:    0:Data:graph_tests.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include "graph.h"
        -:    4:
        -:    5:using std::cout, std::endl;
        -:    6:
        1:    7:int main()
        -:    8:{
        1:    9:    std::cout << "make an empty digraph" << std::endl;
        1:   10:    Graph G;
        -:   11:
        1:   12:    std::cout << "add vertices" << std::endl;
        8:   13:    for (size_t n = 1; n <= 7; n++)
        -:   14:    {
        7:   15:        G.add_vertex(n);
        -:   16:    }
        -:   17:
        1:   18:    std::cout << "add directed edges" << std::endl;
        1:   19:    G.add_edge(1, 2, 5); // 1 ->{5} 2; (edge from 1 to 2 with weight 5)
        1:   20:    G.add_edge(1, 3, 3);
        1:   21:    G.add_edge(2, 3, 2);
        1:   22:    G.add_edge(2, 5, 3);
        1:   23:    G.add_edge(2, 7, 1);
        1:   24:    G.add_edge(3, 4, 7);
        1:   25:    G.add_edge(3, 5, 7);
        1:   26:    G.add_edge(4, 1, 2);
        1:   27:    G.add_edge(4, 6, 6);
        1:   28:    G.add_edge(5, 4, 2);
        1:   29:    G.add_edge(5, 6, 1);
        1:   30:    G.add_edge(7, 5, 1);
        -:   31:
        1:   32:    std::cout << "G has " << G.vertex_count() << " vertices" << std::endl;
        1:   33:    std::cout << "G has " << G.edge_count() << " edges" << std::endl;
        1:   34:    std::cout << std::endl;
        -:   35:    /**
        -:   36:    // std::cout << "compute mst path from 2" <<std::endl;
        -:   37:    // G.prim(2);
        -:   38:
        -:   39:    std::cout << "print minimum spanning paths" <<std::endl;
        -:   40:    for (size_t n = 1; n <= 7; n++) {
        -:   41:        std::cout << "minimum spanning path from 2 to " << n << std::endl;
        -:   42:        std::cout << "  ";
        -:   43:        G.print_path(n);
        -:   44:    }
        -:   45:    std::cout << std::endl;
        -:   46:
        -:   47:    // std::cout << "compute shortest path from 2" <<std::endl;
        -:   48:    // G.dijkstra(2);
        -:   49:
        -:   50:    std::cout << "print shortest paths" <<std::endl;
        -:   51:    for (size_t n = 1; n <= 7; n++) {
        -:   52:        std::cout << "shortest path from 2 to " << n << std::endl;
        -:   53:        std::cout << "  ";
        -:   54:        G.print_shortest_path(n);
        -:   55:    }
        -:   56:    **/
        -:   57:    // TODO(student): implement graph tests
        -:   58:
        1:   59:    return 0;
        -:   60:}
